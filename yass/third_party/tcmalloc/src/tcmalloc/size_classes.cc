// Copyright 2019 The TCMalloc Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "absl/types/span.h"
#include "tcmalloc/common.h"
#include "tcmalloc/internal/config.h"
#include "tcmalloc/size_class_info.h"
#include "tcmalloc/sizemap.h"

GOOGLE_MALLOC_SECTION_BEGIN
namespace tcmalloc {

namespace tcmalloc_internal {

// <fixed> is fixed per-size-class overhead due to end-of-span fragmentation
// and other factors. For instance, if we have a 96 byte size class, and use a
// single 8KiB page, then we will hold 85 objects per span, and have 32 bytes
// left over. There is also a fixed component of 48 bytes of TCMalloc metadata
// per span. Together, the fixed overhead would be wasted/allocated =
// (32 + 48) / (8192 - 32) ~= 0.98%.
// There is also a dynamic component to overhead based on mismatches between the
// number of bytes requested and the number of bytes provided by the size class.
// Together they sum to the total overhead; for instance if you asked for a
// 50-byte allocation that rounds up to a 64-byte size class, the dynamic
// overhead would be 28%, and if <fixed> were 22% it would mean (on average)
// 25 bytes of overhead for allocations of that size.

// clang-format off
#if defined(__cpp_aligned_new) && __STDCPP_DEFAULT_NEW_ALIGNMENT__ <= 8
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 82;
static_assert(kCount <= kNumBaseClasses);
static constexpr SizeClassInfo kSizeClassesList[kCount] = {
    // <bytes>, <pages>, <batch>, <capacity>    <fixed>
    {        0,       0,       0,          0},  // +Inf%
    {        8,       1,      32,       2024},  // 0.59%
    {       16,       1,      32,       2024},  // 0.59%
    {       32,       1,      32,       2027},  // 0.59%
    {       64,       1,      32,       2024},  // 0.59%
    {       72,       1,      32,       1275},  // 1.28%
    {       80,       1,      32,       2024},  // 0.98%
    {       88,       1,      32,       1031},  // 0.68%
    {       96,       1,      32,       1206},  // 0.98%
    {      104,       1,      32,        489},  // 1.58%
    {      112,       1,      32,        804},  // 0.78%
    {      120,       1,      32,        505},  // 0.98%
    {      128,       1,      32,        957},  // 0.59%
    {      136,       1,      32,        355},  // 0.98%
    {      144,       1,      32,        646},  // 2.18%
    {      160,       1,      32,        721},  // 0.98%
    {      176,       1,      32,        378},  // 1.78%
    {      192,       1,      32,        491},  // 2.18%
    {      208,       1,      32,        326},  // 1.58%
    {      224,       1,      32,        284},  // 2.18%
    {      240,       1,      32,        266},  // 0.98%
    {      256,       1,      32,        613},  // 0.59%
    {      264,       1,      32,        155},  // 0.68%
    {      280,       1,      32,        292},  // 1.48%
    {      312,       1,      32,        347},  // 1.58%
    {      336,       1,      32,        360},  // 2.18%
    {      352,       1,      32,        188},  // 1.78%
    {      384,       1,      32,        244},  // 2.18%
    {      408,       1,      32,        213},  // 0.98%
    {      424,       1,      32,        162},  // 2.28%
    {      448,       1,      32,        232},  // 2.18%
    {      480,       1,      32,        194},  // 0.98%
    {      512,       1,      32,        409},  // 0.59%
    {      576,       1,      32,        252},  // 2.18%
    {      640,       1,      32,        214},  // 7.29%
    {      704,       1,      32,        188},  // 6.40%
    {      768,       1,      32,        185},  // 7.29%
    {      896,       1,      32,        203},  // 2.18%
    {     1024,       1,      32,        377},  // 0.59%
    {     1152,       2,      32,        192},  // 1.88%
    {     1280,       2,      32,        170},  // 6.98%
    {     1408,       2,      32,        160},  // 6.10%
    {     1536,       2,      32,        166},  // 6.98%
    {     1792,       2,      32,        163},  // 1.88%
    {     2048,       2,      32,        202},  // 0.29%
    {     2304,       2,      28,        158},  // 1.88%
    {     2688,       2,      24,        149},  // 1.88%
    {     2816,       3,      23,        134},  // 9.30%
    {     3200,       2,      20,        141},  // 2.70%
    {     3456,       3,      18,        133},  // 1.79%
    {     3584,       4,      18,        131},  // 1.74%
    {     4096,       1,      16,        350},  // 0.59%
    {     4736,       3,      13,        140},  // 3.99%
    {     5376,       2,      12,        132},  // 1.88%
    {     6144,       3,      10,        140},  // 0.20%
    {     7168,       7,       9,        134},  // 0.08%
    {     8192,       1,       8,        207},  // 0.59%
    {     9472,       5,       6,        134},  // 8.23%
    {    10240,       4,       6,        129},  // 6.82%
    {    12288,       3,       5,        134},  // 0.20%
    {    13568,       5,       4,        129},  // 0.75%
    {    14336,       7,       4,        128},  // 0.08%
    {    16384,       2,       4,        141},  // 0.29%
    {    20480,       5,       3,        132},  // 0.12%
    {    24576,       3,       2,        131},  // 0.20%
    {    28672,       7,       2,        130},  // 0.08%
    {    32768,       4,       2,        143},  // 0.15%
    {    40960,       5,       2,        130},  // 0.12%
    {    49152,       6,       2,        128},  // 0.10%
    {    57344,       7,       2,        128},  // 0.08%
    {    65536,       8,       2,        133},  // 0.07%
    {    73728,       9,       2,        129},  // 0.07%
    {    81920,      10,       2,        128},  // 0.06%
    {    98304,      12,       2,        128},  // 0.05%
    {   114688,      14,       2,        128},  // 0.04%
    {   131072,      16,       2,        128},  // 0.04%
    {   139264,      17,       2,        128},  // 0.03%
    {   155648,      19,       2,        127},  // 0.03%
    {   172032,      21,       2,        127},  // 0.03%
    {   204800,      25,       2,        127},  // 0.02%
    {   229376,      28,       2,        127},  // 0.02%
    {   262144,      32,       2,        128},  // 0.02%
};
constexpr absl::Span<const SizeClassInfo> kSizeClasses(kSizeClassesList);
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 74;
static_assert(kCount <= kNumBaseClasses);
static constexpr SizeClassInfo kSizeClassesList[kCount] = {
    // <bytes>, <pages>, <batch>, <capacity>    <fixed>
    {        0,       0,       0,          0},  // +Inf%
    {        8,       1,      32,       1824},  // 0.15%
    {       16,       1,      32,       1824},  // 0.15%
    {       32,       1,      32,       1824},  // 0.15%
    {       64,       1,      32,       1824},  // 0.15%
    {       72,       1,      32,       1241},  // 0.17%
    {       80,       1,      32,       1824},  // 0.29%
    {       88,       1,      32,       1267},  // 0.24%
    {       96,       1,      32,       1590},  // 0.24%
    {      104,       1,      32,        718},  // 0.17%
    {      112,       1,      32,        844},  // 0.34%
    {      120,       1,      32,        678},  // 0.17%
    {      128,       1,      32,       1447},  // 0.15%
    {      136,       1,      32,        428},  // 0.54%
    {      144,       1,      32,        599},  // 0.39%
    {      160,       1,      32,        744},  // 0.54%
    {      176,       1,      32,        461},  // 0.24%
    {      192,       1,      32,        603},  // 0.54%
    {      208,       1,      32,        297},  // 0.49%
    {      240,       1,      32,        686},  // 0.54%
    {      256,       1,      32,        811},  // 0.15%
    {      280,       1,      32,        385},  // 0.17%
    {      304,       1,      32,        289},  // 0.89%
    {      320,       1,      32,        203},  // 0.54%
    {      352,       1,      32,        398},  // 0.24%
    {      400,       1,      32,        298},  // 1.28%
    {      448,       1,      32,        255},  // 0.34%
    {      512,       1,      32,        480},  // 0.15%
    {      576,       1,      32,        238},  // 1.74%
    {      640,       1,      32,        284},  // 0.54%
    {      704,       1,      32,        223},  // 1.33%
    {      768,       1,      32,        198},  // 1.74%
    {      896,       1,      32,        257},  // 1.74%
    {     1024,       1,      32,        364},  // 0.15%
    {     1152,       1,      32,        197},  // 1.74%
    {     1280,       1,      32,        175},  // 2.55%
    {     1408,       1,      32,        175},  // 1.33%
    {     1536,       1,      32,        163},  // 1.74%
    {     1792,       1,      32,        158},  // 1.74%
    {     1920,       1,      32,        126},  // 0.54%
    {     2048,       1,      32,        170},  // 0.15%
    {     2176,       1,      30,        162},  // 0.54%
    {     2304,       1,      28,        130},  // 1.74%
    {     2688,       1,      24,        153},  // 1.74%
    {     3200,       1,      20,        142},  // 2.55%
    {     3584,       1,      18,        127},  // 1.74%
    {     4096,       1,      16,        321},  // 0.15%
    {     4608,       1,      14,        135},  // 1.74%
    {     5376,       1,      12,        128},  // 1.74%
    {     6528,       1,      10,        143},  // 0.54%
    {     8192,       1,       8,        165},  // 0.15%
    {     9344,       2,       7,        127},  // 0.27%
    {    10880,       1,       6,        120},  // 0.54%
    {    13056,       2,       5,        122},  // 0.47%
    {    13952,       3,       4,        116},  // 0.70%
    {    16384,       1,       4,        146},  // 0.15%
    {    19072,       3,       3,        125},  // 3.14%
    {    21760,       2,       3,        117},  // 0.47%
    {    24576,       3,       2,        117},  // 0.05%
    {    28672,       7,       2,        121},  // 0.02%
    {    32768,       1,       2,        135},  // 0.15%
    {    38144,       5,       2,        117},  // 7.41%
    {    40960,       4,       2,        114},  // 6.71%
    {    49152,       3,       2,        115},  // 0.05%
    {    57344,       7,       2,        117},  // 0.02%
    {    65536,       2,       2,        123},  // 0.07%
    {    81920,       5,       2,        118},  // 0.03%
    {    98304,       3,       2,        115},  // 0.05%
    {   114688,       7,       2,        115},  // 0.02%
    {   131072,       4,       2,        142},  // 0.04%
    {   163840,       5,       2,        115},  // 0.03%
    {   196608,       6,       2,        115},  // 0.02%
    {   229376,       7,       2,        113},  // 0.02%
    {   262144,       8,       2,        117},  // 0.02%
};
constexpr absl::Span<const SizeClassInfo> kSizeClasses(kSizeClassesList);
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 85;
static_assert(kCount <= kNumBaseClasses);
static constexpr SizeClassInfo kSizeClassesList[kCount] = {
    // <bytes>, <pages>, <batch>, <capacity>    <fixed>
    {        0,       0,       0,          0},  // +Inf%
    {        8,       1,      32,       1912},  // 0.02%
    {       16,       1,      32,       1912},  // 0.02%
    {       32,       1,      32,       1912},  // 0.02%
    {       64,       1,      32,       1918},  // 0.02%
    {       72,       1,      32,       1912},  // 0.04%
    {       80,       1,      32,       1691},  // 0.04%
    {       88,       1,      32,        632},  // 0.05%
    {       96,       1,      32,        898},  // 0.04%
    {      104,       1,      32,        510},  // 0.04%
    {      112,       1,      32,        758},  // 0.04%
    {      128,       1,      32,       1197},  // 0.02%
    {      144,       1,      32,        992},  // 0.04%
    {      160,       1,      32,        841},  // 0.04%
    {      176,       1,      32,        348},  // 0.05%
    {      192,       1,      32,        415},  // 0.04%
    {      208,       1,      32,        299},  // 0.04%
    {      232,       1,      32,        623},  // 0.10%
    {      256,       1,      32,        737},  // 0.02%
    {      280,       1,      32,        365},  // 0.04%
    {      312,       1,      32,        538},  // 0.04%
    {      336,       1,      32,        448},  // 0.04%
    {      376,       1,      32,        220},  // 0.05%
    {      416,       1,      32,        295},  // 0.04%
    {      472,       1,      32,        275},  // 0.09%
    {      512,       1,      32,        339},  // 0.02%
    {      576,       1,      32,        266},  // 0.04%
    {      704,       1,      32,        320},  // 0.12%
    {      768,       1,      32,        181},  // 0.12%
    {      896,       1,      32,        212},  // 0.21%
    {     1024,       1,      32,        340},  // 0.02%
    {     1152,       1,      32,        194},  // 0.26%
    {     1280,       1,      32,        170},  // 0.41%
    {     1408,       1,      32,        148},  // 0.12%
    {     1664,       1,      32,        258},  // 0.36%
    {     1920,       1,      32,        212},  // 0.41%
    {     2048,       1,      32,        183},  // 0.02%
    {     2176,       1,      30,        312},  // 0.41%
    {     2304,       1,      28,        153},  // 0.71%
    {     2560,       1,      25,        146},  // 0.41%
    {     2816,       1,      23,        129},  // 0.12%
    {     3072,       1,      21,        130},  // 0.41%
    {     3328,       1,      19,        147},  // 1.00%
    {     3584,       1,      18,        126},  // 0.21%
    {     3840,       1,      17,        126},  // 0.41%
    {     4096,       1,      16,        273},  // 0.02%
    {     4224,       1,      15,        132},  // 0.12%
    {     4736,       1,      13,        136},  // 0.66%
    {     5248,       1,      12,        147},  // 1.96%
    {     5760,       1,      11,        127},  // 1.15%
    {     6528,       1,      10,        134},  // 0.41%
    {     7168,       1,       9,        123},  // 1.61%
    {     8192,       1,       8,        167},  // 0.02%
    {     9344,       1,       7,        130},  // 0.21%
    {    10880,       1,       6,        126},  // 0.41%
    {    11904,       1,       5,        129},  // 0.12%
    {    13056,       1,       5,        126},  // 0.41%
    {    13696,       1,       4,        120},  // 0.76%
    {    14464,       1,       4,        121},  // 0.71%
    {    15360,       1,       4,        121},  // 0.41%
    {    16384,       1,       4,        139},  // 0.02%
    {    17408,       1,       3,        123},  // 0.41%
    {    18688,       1,       3,        125},  // 0.21%
    {    20096,       1,       3,        120},  // 0.36%
    {    21760,       1,       3,        121},  // 0.41%
    {    23808,       1,       2,        125},  // 0.12%
    {    26112,       1,       2,        122},  // 0.41%
    {    29056,       1,       2,        120},  // 0.26%
    {    32768,       1,       2,        170},  // 0.02%
    {    37376,       1,       2,        122},  // 0.21%
    {    43648,       1,       2,        120},  // 0.12%
    {    45568,       2,       2,        119},  // 4.61%
    {    52352,       1,       2,        120},  // 0.17%
    {    56064,       2,       2,        119},  // 3.92%
    {    65536,       1,       2,        122},  // 0.02%
    {    74880,       2,       2,        120},  // 0.03%
    {    87296,       1,       2,        120},  // 0.12%
    {   104832,       2,       2,        120},  // 0.03%
    {   112256,       3,       2,        119},  // 0.09%
    {   131072,       1,       2,        120},  // 0.02%
    {   149760,       3,       2,        119},  // 5.03%
    {   174720,       2,       2,        119},  // 0.03%
    {   196608,       3,       2,        119},  // 0.01%
    {   209664,       4,       2,        119},  // 0.03%
    {   262144,       1,       2,        122},  // 0.02%
};
constexpr absl::Span<const SizeClassInfo> kSizeClasses(kSizeClassesList);
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static const int kCount = 42;
static_assert(kCount <= kNumBaseClasses);
static constexpr SizeClassInfo kSizeClassesList[kCount] = {
    // <bytes>, <pages>, <batch>, <capacity>    <fixed>
    {        0,       0,       0,          0},  // +Inf%
    {        8,       1,      32,       2622},  // 1.17%
    {       16,       1,      32,       2622},  // 1.17%
    {       32,       1,      32,       2622},  // 1.17%
    {       64,       1,      32,       2622},  // 1.17%
    {       72,       1,      32,        927},  // 2.78%
    {       80,       1,      32,       2622},  // 1.57%
    {       96,       1,      32,       2160},  // 2.78%
    {      104,       1,      32,        670},  // 2.17%
    {      112,       1,      32,       1197},  // 2.78%
    {      128,       1,      32,       1607},  // 1.17%
    {      144,       1,      32,       1292},  // 2.78%
    {      160,       1,      32,       1167},  // 3.60%
    {      176,       1,      32,        563},  // 2.37%
    {      192,       1,      32,        610},  // 2.78%
    {      208,       1,      32,        394},  // 4.86%
    {      224,       1,      32,        551},  // 2.78%
    {      240,       1,      32,        319},  // 1.57%
    {      256,       1,      32,        598},  // 1.17%
    {      272,       1,      32,        260},  // 1.57%
    {      288,       1,      32,        301},  // 2.78%
    {      336,       1,      32,        579},  // 2.78%
    {      408,       1,      32,        250},  // 1.57%
    {      448,       1,      32,        225},  // 2.78%
    {      512,       1,      32,        739},  // 1.17%
    {      576,       2,      32,        338},  // 2.18%
    {      640,       2,      32,        188},  // 7.29%
    {      768,       2,      32,        334},  // 7.29%
    {      896,       2,      32,        287},  // 2.18%
    {     1024,       2,      32,        964},  // 0.59%
    {     1152,       3,      32,        210},  // 7.08%
    {     1280,       3,      32,        164},  // 7.08%
    {     1536,       3,      32,        204},  // 0.39%
    {     2048,       4,      32,        530},  // 0.29%
    {     2304,       4,      28,        191},  // 1.88%
    {     2688,       4,      24,        181},  // 1.88%
    {     3200,       4,      20,        166},  // 2.70%
    {     4096,       4,      16,        624},  // 0.29%
    {     4736,       5,      13,        213},  // 8.36%
    {     6144,       3,      10,        168},  // 0.39%
    {     7168,       7,       9,        169},  // 0.17%
    {     8192,       4,       8,        236},  // 0.29%
};
constexpr absl::Span<const SizeClassInfo> kSizeClasses(kSizeClassesList);
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#else
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 85;
static_assert(kCount <= kNumBaseClasses);
static constexpr SizeClassInfo kSizeClassesList[kCount] = {
    // <bytes>, <pages>, <batch>, <capacity>    <fixed>
    {        0,       0,       0,          0},  // +Inf%
    {        8,       1,      32,       2369},  // 0.59%
    {       16,       1,      32,       2369},  // 0.59%
    {       32,       1,      32,       2369},  // 0.59%
    {       64,       1,      32,       2369},  // 0.59%
    {       80,       1,      32,       2369},  // 0.98%
    {       96,       1,      32,       1596},  // 0.98%
    {      112,       1,      32,        911},  // 0.78%
    {      128,       1,      32,       1035},  // 0.59%
    {      144,       1,      32,        699},  // 2.18%
    {      160,       1,      32,        586},  // 0.98%
    {      176,       1,      32,        333},  // 1.78%
    {      192,       1,      32,        418},  // 2.18%
    {      208,       1,      32,        296},  // 1.58%
    {      224,       1,      32,        264},  // 2.18%
    {      240,       1,      32,        251},  // 0.98%
    {      256,       1,      32,        507},  // 0.59%
    {      272,       1,      32,        231},  // 0.98%
    {      288,       1,      32,        264},  // 2.18%
    {      304,       1,      32,        205},  // 4.25%
    {      320,       1,      32,        250},  // 3.00%
    {      336,       1,      32,        269},  // 2.18%
    {      352,       1,      32,        193},  // 1.78%
    {      368,       1,      32,        173},  // 1.78%
    {      384,       1,      32,        209},  // 2.18%
    {      400,       1,      32,        190},  // 3.00%
    {      416,       1,      32,        187},  // 4.25%
    {      448,       1,      32,        236},  // 2.18%
    {      480,       1,      32,        198},  // 0.98%
    {      512,       1,      32,        356},  // 0.59%
    {      576,       1,      32,        241},  // 2.18%
    {      640,       1,      32,        213},  // 7.29%
    {      704,       1,      32,        193},  // 6.40%
    {      768,       1,      32,        191},  // 7.29%
    {      896,       1,      32,        205},  // 2.18%
    {     1024,       1,      32,        332},  // 0.59%
    {     1152,       2,      32,        197},  // 1.88%
    {     1280,       2,      32,        180},  // 6.98%
    {     1408,       2,      32,        172},  // 6.10%
    {     1536,       2,      32,        178},  // 6.98%
    {     1792,       2,      32,        175},  // 1.88%
    {     2048,       2,      32,        204},  // 0.29%
    {     2304,       2,      28,        171},  // 1.88%
    {     2688,       2,      24,        165},  // 1.88%
    {     2816,       3,      23,        154},  // 9.30%
    {     3200,       2,      20,        160},  // 2.70%
    {     3456,       3,      18,        153},  // 1.79%
    {     3584,       4,      18,        152},  // 1.74%
    {     4096,       1,      16,        312},  // 0.59%
    {     4736,       3,      13,        158},  // 3.99%
    {     5376,       2,      12,        153},  // 1.88%
    {     6144,       3,      10,        158},  // 0.20%
    {     6528,       4,      10,        150},  // 0.54%
    {     7168,       7,       9,        152},  // 0.08%
    {     8192,       1,       8,        207},  // 0.59%
    {     9472,       5,       6,        154},  // 8.23%
    {    10240,       4,       6,        150},  // 6.82%
    {    12288,       3,       5,        154},  // 0.20%
    {    13568,       5,       4,        150},  // 0.75%
    {    14336,       7,       4,        149},  // 0.08%
    {    16384,       2,       4,        160},  // 0.29%
    {    20480,       5,       3,        153},  // 0.12%
    {    24576,       3,       2,        152},  // 0.20%
    {    28672,       7,       2,        152},  // 0.08%
    {    32768,       4,       2,        161},  // 0.15%
    {    40960,       5,       2,        150},  // 0.12%
    {    49152,       6,       2,        149},  // 0.10%
    {    57344,       7,       2,        149},  // 0.08%
    {    65536,       8,       2,        153},  // 0.07%
    {    73728,       9,       2,        150},  // 0.07%
    {    81920,      10,       2,        149},  // 0.06%
    {    90112,      11,       2,        148},  // 0.05%
    {    98304,      12,       2,        149},  // 0.05%
    {   106496,      13,       2,        148},  // 0.05%
    {   114688,      14,       2,        148},  // 0.04%
    {   131072,      16,       2,        149},  // 0.04%
    {   139264,      17,       2,        149},  // 0.03%
    {   147456,      18,       2,        148},  // 0.03%
    {   155648,      19,       2,        148},  // 0.03%
    {   172032,      21,       2,        148},  // 0.03%
    {   188416,      23,       2,        148},  // 0.03%
    {   204800,      25,       2,        148},  // 0.02%
    {   221184,      27,       2,        148},  // 0.02%
    {   237568,      29,       2,        146},  // 0.02%
    {   262144,      32,       2,        148},  // 0.02%
};
constexpr absl::Span<const SizeClassInfo> kSizeClasses(kSizeClassesList);
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 77;
static_assert(kCount <= kNumBaseClasses);
static constexpr SizeClassInfo kSizeClassesList[kCount] = {
    // <bytes>, <pages>, <batch>, <capacity>    <fixed>
    {        0,       0,       0,          0},  // +Inf%
    {        8,       1,      32,       2249},  // 0.15%
    {       16,       1,      32,       2249},  // 0.15%
    {       32,       1,      32,       2249},  // 0.15%
    {       64,       1,      32,       2249},  // 0.15%
    {       80,       1,      32,       2249},  // 0.29%
    {       96,       1,      32,       2100},  // 0.24%
    {      112,       1,      32,       1138},  // 0.34%
    {      128,       1,      32,       1563},  // 0.15%
    {      144,       1,      32,        739},  // 0.39%
    {      160,       1,      32,        615},  // 0.54%
    {      176,       1,      32,        402},  // 0.24%
    {      192,       1,      32,        509},  // 0.54%
    {      208,       1,      32,        279},  // 0.49%
    {      224,       1,      32,        359},  // 0.34%
    {      240,       1,      32,        355},  // 0.54%
    {      256,       1,      32,        666},  // 0.15%
    {      288,       1,      32,        382},  // 0.84%
    {      304,       1,      32,        234},  // 0.89%
    {      320,       1,      32,        208},  // 0.54%
    {      352,       1,      32,        355},  // 0.24%
    {      384,       1,      32,        244},  // 0.54%
    {      400,       1,      32,        176},  // 1.28%
    {      448,       1,      32,        246},  // 0.34%
    {      480,       1,      32,        254},  // 0.54%
    {      512,       1,      32,        304},  // 0.15%
    {      576,       1,      32,        234},  // 1.74%
    {      640,       1,      32,        269},  // 0.54%
    {      704,       1,      32,        222},  // 1.33%
    {      768,       1,      32,        204},  // 1.74%
    {      832,       1,      32,        208},  // 1.13%
    {      896,       1,      32,        182},  // 1.74%
    {     1024,       1,      32,        328},  // 0.15%
    {     1152,       1,      32,        203},  // 1.74%
    {     1280,       1,      32,        186},  // 2.55%
    {     1408,       1,      32,        186},  // 1.33%
    {     1536,       1,      32,        178},  // 1.74%
    {     1792,       1,      32,        174},  // 1.74%
    {     1920,       1,      32,        149},  // 0.54%
    {     2048,       1,      32,        183},  // 0.15%
    {     2176,       1,      30,        177},  // 0.54%
    {     2304,       1,      28,        153},  // 1.74%
    {     2432,       1,      26,        150},  // 3.80%
    {     2688,       1,      24,        160},  // 1.74%
    {     2944,       1,      22,        149},  // 1.33%
    {     3200,       1,      20,        153},  // 2.55%
    {     3584,       1,      18,        150},  // 1.74%
    {     4096,       1,      16,        297},  // 0.15%
    {     4608,       1,      14,        157},  // 1.74%
    {     5376,       1,      12,        152},  // 1.74%
    {     6528,       1,      10,        163},  // 0.54%
    {     7168,       2,       9,        143},  // 1.66%
    {     8192,       1,       8,        177},  // 0.15%
    {     9344,       2,       7,        150},  // 0.27%
    {    10880,       1,       6,        145},  // 0.54%
    {    13056,       2,       5,        146},  // 0.47%
    {    13952,       3,       4,        142},  // 0.70%
    {    16384,       1,       4,        165},  // 0.15%
    {    19072,       3,       3,        148},  // 3.14%
    {    21760,       2,       3,        143},  // 0.47%
    {    24576,       3,       2,        143},  // 0.05%
    {    26112,       4,       2,        142},  // 0.43%
    {    28672,       7,       2,        145},  // 0.02%
    {    32768,       1,       2,        157},  // 0.15%
    {    38144,       5,       2,        143},  // 7.41%
    {    40960,       4,       2,        141},  // 6.71%
    {    49152,       3,       2,        142},  // 0.05%
    {    57344,       7,       2,        143},  // 0.02%
    {    65536,       2,       2,        147},  // 0.07%
    {    81920,       5,       2,        144},  // 0.03%
    {    98304,       3,       2,        142},  // 0.05%
    {   114688,       7,       2,        141},  // 0.02%
    {   131072,       4,       2,        161},  // 0.04%
    {   163840,       5,       2,        141},  // 0.03%
    {   196608,       6,       2,        142},  // 0.02%
    {   229376,       7,       2,        136},  // 0.02%
    {   262144,       8,       2,        143},  // 0.02%
};
constexpr absl::Span<const SizeClassInfo> kSizeClasses(kSizeClassesList);
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 88;
static_assert(kCount <= kNumBaseClasses);
static constexpr SizeClassInfo kSizeClassesList[kCount] = {
    // <bytes>, <pages>, <batch>, <capacity>    <fixed>
    {        0,       0,       0,          0},  // +Inf%
    {        8,       1,      32,       2368},  // 0.02%
    {       16,       1,      32,       2368},  // 0.02%
    {       32,       1,      32,       2368},  // 0.02%
    {       64,       1,      32,       2371},  // 0.02%
    {       80,       1,      32,       2368},  // 0.04%
    {       96,       1,      32,       1006},  // 0.04%
    {      112,       1,      32,        834},  // 0.04%
    {      128,       1,      32,        871},  // 0.02%
    {      144,       1,      32,        733},  // 0.04%
    {      160,       1,      32,        633},  // 0.04%
    {      176,       1,      32,        302},  // 0.05%
    {      192,       1,      32,        347},  // 0.04%
    {      208,       1,      32,        268},  // 0.04%
    {      224,       1,      32,        466},  // 0.04%
    {      256,       1,      32,        584},  // 0.02%
    {      288,       1,      32,        446},  // 0.04%
    {      320,       1,      32,        342},  // 0.04%
    {      336,       1,      32,        321},  // 0.04%
    {      368,       1,      32,        199},  // 0.07%
    {      400,       1,      32,        257},  // 0.07%
    {      448,       1,      32,        259},  // 0.04%
    {      480,       1,      32,        188},  // 0.04%
    {      512,       1,      32,        275},  // 0.02%
    {      576,       1,      32,        246},  // 0.04%
    {      640,       1,      32,        235},  // 0.17%
    {      704,       1,      32,        197},  // 0.12%
    {      768,       1,      32,        190},  // 0.12%
    {      896,       1,      32,        210},  // 0.21%
    {     1024,       1,      32,        296},  // 0.02%
    {     1152,       1,      32,        198},  // 0.26%
    {     1280,       1,      32,        182},  // 0.41%
    {     1408,       1,      32,        168},  // 0.12%
    {     1536,       1,      32,        168},  // 0.41%
    {     1664,       1,      32,        221},  // 0.36%
    {     1920,       1,      32,        209},  // 0.41%
    {     2048,       1,      32,        191},  // 0.02%
    {     2176,       1,      30,        278},  // 0.41%
    {     2304,       1,      28,        171},  // 0.71%
    {     2560,       1,      25,        165},  // 0.41%
    {     2816,       1,      23,        155},  // 0.12%
    {     3072,       1,      21,        155},  // 0.41%
    {     3328,       1,      19,        167},  // 1.00%
    {     3584,       1,      18,        153},  // 0.21%
    {     3840,       1,      17,        153},  // 0.41%
    {     4096,       1,      16,        251},  // 0.02%
    {     4224,       1,      15,        156},  // 0.12%
    {     4736,       1,      13,        160},  // 0.66%
    {     5120,       1,      12,        158},  // 0.41%
    {     5632,       1,      11,        160},  // 1.20%
    {     6144,       1,      10,        153},  // 1.61%
    {     6528,       1,      10,        154},  // 0.41%
    {     7168,       1,       9,        150},  // 1.61%
    {     8192,       1,       8,        180},  // 0.02%
    {     8704,       1,       7,        150},  // 0.41%
    {     9344,       1,       7,        153},  // 0.21%
    {    10368,       1,       6,        151},  // 1.15%
    {    11392,       1,       5,        154},  // 0.07%
    {    12416,       1,       5,        153},  // 0.56%
    {    13056,       1,       5,        150},  // 0.41%
    {    13696,       1,       4,        149},  // 0.76%
    {    14464,       1,       4,        149},  // 0.71%
    {    15360,       1,       4,        149},  // 0.41%
    {    16384,       1,       4,        161},  // 0.02%
    {    17408,       1,       3,        150},  // 0.41%
    {    18688,       1,       3,        151},  // 0.21%
    {    20096,       1,       3,        149},  // 0.36%
    {    21760,       1,       3,        149},  // 0.41%
    {    23808,       1,       2,        151},  // 0.12%
    {    26112,       1,       2,        150},  // 0.41%
    {    29056,       1,       2,        149},  // 0.26%
    {    32768,       1,       2,        182},  // 0.02%
    {    37376,       1,       2,        150},  // 0.21%
    {    43648,       1,       2,        149},  // 0.12%
    {    45568,       2,       2,        148},  // 4.61%
    {    52352,       1,       2,        149},  // 0.17%
    {    56064,       2,       2,        148},  // 3.92%
    {    65536,       1,       2,        150},  // 0.02%
    {    74880,       2,       2,        148},  // 0.03%
    {    87296,       1,       2,        148},  // 0.12%
    {   104832,       2,       2,        148},  // 0.03%
    {   112256,       3,       2,        148},  // 0.09%
    {   131072,       1,       2,        148},  // 0.02%
    {   149760,       3,       2,        148},  // 5.03%
    {   174720,       2,       2,        148},  // 0.03%
    {   196608,       3,       2,        148},  // 0.01%
    {   209664,       4,       2,        148},  // 0.03%
    {   262144,       1,       2,        150},  // 0.02%
};
constexpr absl::Span<const SizeClassInfo> kSizeClasses(kSizeClassesList);
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static const int kCount = 45;
static_assert(kCount <= kNumBaseClasses);
static constexpr SizeClassInfo kSizeClassesList[kCount] = {
    // <bytes>, <pages>, <batch>, <capacity>    <fixed>
    {        0,       0,       0,          0},  // +Inf%
    {        8,       1,      32,       2906},  // 1.17%
    {       16,       1,      32,       2906},  // 1.17%
    {       32,       1,      32,       2910},  // 1.17%
    {       64,       1,      32,       2906},  // 1.17%
    {       80,       1,      32,       2906},  // 1.57%
    {       96,       1,      32,       1880},  // 2.78%
    {      112,       1,      32,       1490},  // 2.78%
    {      128,       1,      32,       1411},  // 1.17%
    {      144,       1,      32,       1144},  // 2.78%
    {      160,       1,      32,       1037},  // 3.60%
    {      176,       1,      32,        525},  // 2.37%
    {      192,       1,      32,        563},  // 2.78%
    {      208,       1,      32,        380},  // 4.86%
    {      224,       1,      32,        512},  // 2.78%
    {      240,       1,      32,        316},  // 1.57%
    {      256,       1,      32,        553},  // 1.17%
    {      272,       1,      32,        267},  // 1.57%
    {      288,       1,      32,        301},  // 2.78%
    {      304,       1,      32,        261},  // 4.86%
    {      336,       1,      32,        457},  // 2.78%
    {      368,       1,      32,        226},  // 2.37%
    {      400,       1,      32,        207},  // 3.60%
    {      448,       1,      32,        241},  // 2.78%
    {      512,       1,      32,        673},  // 1.17%
    {      576,       2,      32,        333},  // 2.18%
    {      640,       2,      32,        206},  // 7.29%
    {      768,       2,      32,        329},  // 7.29%
    {      896,       2,      32,        290},  // 2.18%
    {     1024,       2,      32,        864},  // 0.59%
    {     1152,       3,      32,        224},  // 7.08%
    {     1280,       3,      32,        184},  // 7.08%
    {     1536,       3,      32,        219},  // 0.39%
    {     1792,       4,      32,        193},  // 1.88%
    {     2048,       4,      32,        483},  // 0.29%
    {     2304,       4,      28,        207},  // 1.88%
    {     2688,       4,      24,        199},  // 1.88%
    {     3200,       4,      20,        187},  // 2.70%
    {     3584,       7,      18,        184},  // 0.17%
    {     4096,       4,      16,        570},  // 0.29%
    {     4736,       5,      13,        226},  // 8.36%
    {     5376,       4,      12,        182},  // 1.88%
    {     6144,       3,      10,        186},  // 0.39%
    {     7168,       7,       9,        190},  // 0.17%
    {     8192,       4,       8,        246},  // 0.29%
};
constexpr absl::Span<const SizeClassInfo> kSizeClasses(kSizeClassesList);
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#endif
// clang-format on

}  // namespace tcmalloc_internal
}  // namespace tcmalloc
GOOGLE_MALLOC_SECTION_END
